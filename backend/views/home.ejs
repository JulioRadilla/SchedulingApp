<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <link href="./homePage/style.css" rel="stylesheet" />
  </head>
  <body>
    <header>
      <nav class="navbar">
        <div class="logo">
          <img src="/src/target.png" />
          <h1>TargetTracker</h1>
        </div>
        <div class="buttons">
          <form action="/logout" method="POST">
            <button type="submit" class="logout">Log out</button>
          </form>
          <div class="user">
            <a href="/profile">
              <svg
                class="user"
                xmlns="http://www.w3.org/2000/svg"
                width="23"
                height="23"
                viewBox="0 0 25 25"
                fill="none"
              >
                <path
                  d="M12.5002 0.833252C14.0473 0.833252 15.531 1.44783 16.625 2.5418C17.7189 3.63576 18.3335 5.11949 18.3335 6.66659C18.3335 8.21368 17.7189 9.69741 16.625 10.7914C15.531 11.8853 14.0473 12.4999 12.5002 12.4999C10.9531 12.4999 9.46934 11.8853 8.37537 10.7914C7.28141 9.69741 6.66683 8.21368 6.66683 6.66659C6.66683 5.11949 7.28141 3.63576 8.37537 2.5418C9.46934 1.44783 10.9531 0.833252 12.5002 0.833252ZM12.5002 15.4166C18.946 15.4166 24.1668 18.027 24.1668 21.2499V24.1666H0.833496V21.2499C0.833496 18.027 6.05433 15.4166 12.5002 15.4166Z"
                  fill="black"
                />
              </svg>
            </a>
          </div>
        </div>
      </nav>
    </header>
    <div class="container">
      <h1 id="displayDay"></h1>
      <div class="main-wrapper">
        <div class="main">
          <!-- Gets the first name of full name instead of including last name-->
          <% const firstName = fullName.split(' ')[0]; %>
          <h2>Welcome <%=firstName%>!</h2>
          <div class="calendar">
            <img onclick="goBack()" class="arrows" src="/src/back.png" />
            <div id="dateDisplay"><%=formattedDate %></div>
            <img onclick="goForward()" class="arrows" src="/src/forward.png" />
          </div>
          <a href="/create-task"><button class="create">Create task</button></a>
        </div>
      </div>
      <div class="task-wrapper">
        <div class="task-container">
          <h2 class="task-title">Task</h2>
          <!-- The dynamically updated task messages will be displayed inside this div -->
          <div id="task-message" class="task-message">
            <!--Shows task for current day since its not fetching unless user clicks forward or backword icon-->
            <div class="movements">
              <% const matchingTasks = tasks.filter(task => task.date === formattedDate); %>
              <% if (matchingTasks.length > 0) { %>
                  <!-- Iterate through matching tasks and display them -->
                  <% matchingTasks.forEach(task => { %>
                      <div id="<%=task._id%>" class="movements__row">
                        <div class="movements__type task"><%= task.taskTitle %></div>
                        <div class="movements__value">Date: <%= task.date %></div>
                        <button class="details btn--show-modal">view details</button>
                        <button class="delete" onclick="deleteTask('<%= task._id %>')">delete</button>
                      </div>
                      <div class="content hiddenC">
                        <h2 class="description">Description:</h2>
                        <p class="p-content">
                          <%= task.description %>
                        </p>
                      </div>    
                  <% }); %>
              <% } else { %>
                  <!-- No tasks for this date message -->
                  <p class="no-task">No tasks for this date! Use 'Create Task' to plan something or enjoy a free day. ðŸŒŸ</p>
              <% } %>
          </div>
        </div>
      </div>
    </div>
    <footer>
      <div class="footer-content">
        <ul class="footer-list">
          <li>Privacy</li>
          <li>About</li>
          <li>Contact</li>
        </ul>
        <div class="footer-task-version">
          <div>TaskTracker v.1.0.0</div>
        </div>
      </div>
    </footer>
    <script>
      // Initialize with the current date
      let currentDate = new Date();
      //MM/DD/YYYY
      let formattedDate = currentDate
        .toLocaleDateString("en-US", {
          month: "2-digit",
          day: "2-digit",
          year: "numeric",
        })
        .split("/")
        .join("/");

      updateTasks();

      // Function to display the current date in the format --/--/--
      function displayDate() {
        document.getElementById("dateDisplay").innerHTML = formattedDate;
      }

      function displayDay() {
        const day = currentDate.toLocaleDateString("en-US", {
          weekday: "long",
        });
        document.getElementById("displayDay").innerHTML = day;
      }

      // Function to go back one day
      function goBack() {
        currentDate.setDate(currentDate.getDate() - 1);
        formattedDate = currentDate
          .toLocaleDateString("en-US", {
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
          })
          .split("/")
          .join("/");
        displayDate();
        displayDay();
        console.log("Went back. Formatted Date:", formattedDate);
        // Call a function to update the tasks based on the new formattedDate
        updateTasks();
      }

      // Function to go forward one day
      function goForward() {
        currentDate.setDate(currentDate.getDate() + 1);
        formattedDate = currentDate
          .toLocaleDateString("en-US", {
            month: "2-digit",
            day: "2-digit",
            year: "numeric",
          })
          .split("/")
          .join("/");
        displayDate();
        displayDay();
        console.log("Went forward. Formatted Date:", formattedDate);
        // Call a function to update the tasks based on the new formattedDate
        updateTasks();
      }

      async function fetchTasksByDate(date) {
        const response = await fetch(`/fetch-tasks?date=${date}`);
        const data = await response.json();
        return data.tasks;
      }

      // Function to update tasks based on the selected date
      async function updateTasks() {
        try {
          const tasks = await fetchTasksByDate(formattedDate);

          const containerMovements = document.querySelector(".movements");
          containerMovements.innerHTML = ''

          displayDay();

          if (tasks.length > 0) {
            // Sort tasks chronologically by their scheduled time
            // The compareTasksByTime function is used as a callback to determine the order.
            // This ensures tasks are displayed in ascending order of time, from earliest to latest.
            const sortedTasks = tasks.sort(compareTasksByTime);

            // Iterate through sorted tasks and display them on the day the user logs in 
            sortedTasks.forEach((task) => {
              const html = `
              <div id="${task._id}" class="movements__row">
                <div class="info ">
                  <div class="task"><span class='bold'>Task: </span>${task.taskTitle}</div>
                  <div class="time"><span class='bold'>Start Time: </span>${task.time}</div>
                  <button class="details">view details</button>
                  <button class="done">not done</button>
                  <button class="delete" onclick="deleteTask('${task._id}')">delete</button>   
                </div>
                <div class="content hiddenC">
                  <h2 class="description">Description:</h2>
                  <p class="p-content">
                   ${task.description}
                  </p>
                </div>              
                </div>
              `
              containerMovements.insertAdjacentHTML('afterbegin', html)
              containerMovements.classList.remove('hidden-movements')
              const details = document.querySelector(".details");
              const content = document.querySelector(".content");
              const notD = document.querySelector('.done')
              const moveR = document.querySelector('.movements__row')

              const show_content = function (e) {
                e.preventDefault();
                const on = content.classList.toggle("hiddenC");
              };
              const color = function(e){
                e.preventDefault()
                const add = moveR.classList.toggle('highlight')
              }

              notD.addEventListener('click', color)

              details.addEventListener("click", show_content);

            });
          } else {
            const noTasksMessage = document.createElement("p");
            noTasksMessage.innerHTML = "No tasks for this date! Use 'Create Task' to plan something or enjoy a free day. ðŸŒŸ";
            containerMovements.appendChild(noTasksMessage); 
            noTasksMessage.classList.add('no-task') 
            containerMovements.classList.add('hidden-movements') 
          }
        } catch (error) {
          console.error("Error fetching tasks:", error);
        }
      }

      //This function takes two tasks and compares their times using the parseTime function.
      function compareTasksByTime(task1, task2) {
        const time1 = parseTime(task1.time);
        const time2 = parseTime(task2.time);
        //Calculates the time difference in minutes negative result indicates task1 is earlier,
        //positive means task1 is later, and zero means they occur at the same time.
        return time1 + time2;
      }

      //This function takes a time string in the format "HH:mm AM/PM" and
      //converts it into minutes since midnight.
      function parseTime(timeString) {
        const [time, period] = timeString.split(" ");
        const [hours, minutes] = time.split(":");
        //Makes it to military time to compare
        let parsedHours = parseInt(hours, 10);
        if (period === "PM" && parsedHours !== 12) {
          parsedHours += 12;
        } else if (period === "AM" && parsedHours === 12) {
          parsedHours = 0;
        }

        return parsedHours * 60 + parseInt(minutes, 10);
      }
      async function deleteTask(taskId) {
        try {
          console.log('Deleting task with ID:', taskId);

          const response = await fetch('/delete-task', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ taskId: taskId }),
          });

          if (response.ok) {
            console.log('Task deleted successfully');
            
            // Refresh the page with the current date as a query parameter
            updateTasks()

          } else {
            console.error('Failed to delete task');
          }
        } catch (error) {
          console.error('Error deleting task:', error);
        }
      }
    </script>
  </body>
</html>
